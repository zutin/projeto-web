generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  firstName       String
  lastName        String
  username        String
  dob             DateTime?
  status          String?
  pfp             String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  allowPublicName Boolean   @default(true)
  allowPublicDob  Boolean   @default(true)
  
  posts       Post[]    // Relação 1-N: Um usuário pode ter várias postagens
  likes       PostLike[] // Relação 1-N: Um usuário pode dar vários likes
  comments    PostComment[] // Relação 1-N: Um usuário pode fazer vários comentários
  
  @@map("users")
}

model Post {
  id          String    @id @default(uuid())
  userId      String
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  
  user        User      @relation(fields: [userId], references: [id]) // Relação 1-1: Cada postagem pertence a um usuário
  photos      PostPhoto[] // Relação 1-N: Uma postagem pode ter várias fotos
  likes       PostLike[] // Relação 1-N: Uma postagem pode ter vários likes
  comments    PostComment[] // Relação 1-N: Uma postagem pode ter vários comentários
  
  @@map("posts")
}

model PostPhoto {
  id          String    @id @default(uuid())
  postId      String
  url         String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  
  post        Post      @relation(fields: [postId], references: [id]) // Relação 1-1: Cada foto de postagem pertence a uma postagem
  
  @@map("post_photos")
}

model PostLike {
  id          String    @id @default(uuid())
  postId      String
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  
  post        Post      @relation(fields: [postId], references: [id]) // Relação 1-1: Cada like está associado a uma postagem
  user        User      @relation(fields: [userId], references: [id]) // Relação 1-1: Cada like é dado por um usuário
  
  @@map("post_likes")
}

model PostComment {
  id          String    @id @default(uuid())
  postId      String
  userId      String
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  
  post        Post      @relation(fields: [postId], references: [id]) // Relação 1-1: Cada comentário está associado a uma postagem
  user        User      @relation(fields: [userId], references: [id]) // Relação 1-1: Cada comentário é feito por um usuário
  
  @@map("post_comments")
}

